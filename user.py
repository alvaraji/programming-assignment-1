# -*- coding: utf-8 -*-
"""Lecture 7 (user).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RPuc4pVgI3N60Pv4UmL7ntqtLSTl3r8f
"""

from datetime import datetime
#import sys
#import os
#sys.path.append(os.path.abspath("/content/drive/MyDrive/uni stuff/FS2024/Python Programing/"))
from post import Post
import re

class User():
    user_count = 0

    def __init__(self, username, email):

        if not(User.is_valid_username(username)):
            raise ValueError("Invalid username.")

        if not(User.is_valid_email(email)):
            raise ValueError("Invalid email address.")

        self._username = username
        self._email = email
        self._bio = ""
        self._joined_on = datetime.now()
        self._posts = []
        self._liked_posts = []
        self._comments = []
        self._liked_comments = []
        self.following = []
        self.followers = []

        User.user_count = User.user_count + 1

    def display_info(self):
        print(f"Username: {self._username}")
        print(f"User Email: {self._email}")
        print(f"User Bio: {self._bio}")
        print(f"Join Date: {self._joined_on}")
        print(f"Number of Posts: {len(self._posts)}")

    def create_post(self, content):
        new_post = Post(self, content)
        self._posts.append(new_post)

    def like_post(self, post):
        if post not in self._liked_posts:
            post.like()
            self._liked_posts.append(post)
        else:
            print(f"{self._username} has already liked this post")

    def comment_on_post(self, post, content):
        post.add_comment(self, content)

    @classmethod
    def get_user_count(cls):
      return cls.user_count

    @staticmethod
    def is_valid_username(username):
        if len(username) < 3 or len(username) > 30:
            return False

        for character in username:
            if not(character.isalnum()) and character != "." \
               and character != "_":
                return False

        return True

    @staticmethod
    def is_valid_email(email):
        pattern = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"

        if re.match(pattern, email):
            return True
        else:
            return False

    @property
    def username(self):
        return self._username

    @property
    def email(self):
        return self._email

    @property
    def bio(self):
        return self._bio

    @bio.setter
    def bio(self, new_bio):

        if len(new_bio) > 150:
            raise ValueError("Bio must be 150 characters or less.")

        self._bio = new_bio

    @property
    def joined_on(self):
        return self._joined_on

    @property
    def posts(self):
        return self._posts

    def get_activity_feed(self):
        activities = []
        for post in self._posts:
            activities.append(("Post created", post.timestamp, post.content))
        for post in self._liked_post:
            activities.append(("Post liked", post.timestamp, post.content))
        for post in self._posts:
            for comment in post.comments:
                if comment.user == self:
                    activities.append(("Comment created",
                                       comment.timestamp, comment.content))

        return sorted(activities, key = lambda x: x[1], reverse=True)

#newGuy = User("jon", "john@mail.com")

#print(f"Users: {newGuy.get_user_count()}")

#newGuy.create_post("hello world!")

#newGuy.display_info()

#print("\n Posts: \n")

#print(newGuy.joined_on())

#newGuy.posts()[0].display()




#newGuy.username = "a" * 151

#newGuy.display_info()