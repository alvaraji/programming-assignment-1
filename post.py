# -*- coding: utf-8 -*-
"""Lecture 7 (post)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nlZT_EWR8H11TY2DkFFvK0e2-CjxGVxp
"""

from datetime import datetime
#import sys
#import os
#sys.path.append(os.path.abspath("/content/drive/MyDrive/uni stuff/FS2024/Python Programing/"))
from comment import Comment
#from user import User

class Post():

    post_count = 0

    def __init__(self, author, content, tags=None):
        if not(Post.is_valid_content(content)):
            raise ValueError("Invalid post content.")

        self._author = author
        self._content = content
        self._tags = set()

        if (tags != None):
            for tag in tags:
                if not(Post.is_valid_tag(tag)):
                    raise ValueError("Invalid tag.")
                else:
                    self._tags.add(tag)

        self._liked_by = []
        self._created_on = datetime.now()
        self._comments = []

        Post.post_count = Post.post_count + 1

    @property
    def content(self):
        return self._content

    @property
    def created_on(self):
        return self._created_on

    @property
    def tags(self):
        return self._tags

    @property
    def liked_by(self):
        return self._liked_by

    def display(self):
        print(f"Posted by: {self._author.username}")
        print(f"Content: {self._content}")
        print(f"Posted on: {self._created_on}")
        print(f"Likes: {len(self._liked_by)}")
        print(f"Number of comments: {len(self._comments)} \n")
        print(f"Comments: ")
        for comment in self._comments:
            comment.display()

    def add_tag(self, tag):
        if not(Post.is_valid_tag(tag)):
            raise ValueError("Invalid tag.")
        else:
            self._tags.add(tag)

    def remove_tag(self, tag):
        if tag in self._tags:
            self._tags.discard(tag)

    @classmethod
    def get_post_count(cls):
        return cls.post_count

    @staticmethod
    def is_valid_tag(tag):
        if tag.isalnum() and len(tag) <= 30:
            return True
        else:
            return False

    @staticmethod
    def is_valid_content(content):
        if len(content) < 3 or len(content) > 2200:
            return False
        else:
            return True

    def add_comment(self, author, content):
        new_comment = Comment(author, self, content)
        self._comments.append(new_comment)

#user1 = User("jon", "test@mail.com")

#newPost = Post(user1, "hello world", ["boopydoopy", "test"])

#newPost.display()

#newPost.add_tag("testdel")

#newPost.add_tag("testadd")

#print(newPost.tags())


#newPost.remove_tag("unknown")

#newPost.remove_tag("testdel")

#Post.is_valid_content("ab")

#newPost.tags()

Post.get_post_count()